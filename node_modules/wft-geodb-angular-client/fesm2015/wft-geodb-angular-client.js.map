{"version":3,"file":"wft-geodb-angular-client.js.map","sources":["ng://wft-geodb-angular-client/lib/model/geodb-config.model.ts","ng://wft-geodb-angular-client/lib/geodb.service.ts","ng://wft-geodb-angular-client/lib/geodb-free.module.ts","ng://wft-geodb-angular-client/lib/auth.interceptor.ts","ng://wft-geodb-angular-client/lib/geodb-pro.module.ts"],"sourcesContent":["export class GeoDbConfig {\n  apiKey: string;\n  serviceUri: string;\n}\n","import {Observable} from 'rxjs';\n\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\n\nimport {PlaceDetails} from './model/place-details.model';\nimport {PlaceSummary} from './model/place-summary.model';\nimport {CountrySummary} from './model/country-summary.model';\nimport {GeoResponse} from './model/geo-response.model';\nimport {NearLocationRequest} from './request/near-location-request.model';\nimport {RegionSummary} from './model/region-summary.model';\n\nimport {GeoDbConfig} from './model/geodb-config.model';\nimport {CountryDetails} from './model/country-details.model';\nimport {RegionDetails} from './model/region-details.model';\nimport {Currency} from './model/currency.model';\nimport {Locale} from './model/locale.model';\nimport {FindAdminDivisionsRequest} from './request/find-admin-divisions-request.model';\nimport {FindPlacesRequest} from './request/find-places-request.model';\nimport {FindCollectionRequest} from './request/find-collection-request.model';\nimport {FindCountriesRequest} from './request/find-countries-request.model';\nimport {FindCurrenciesRequest} from './request/find-currencies-request.model';\nimport {FindRegionsRequest} from './request/find-regions-request.model';\nimport {FindRegionCitiesRequest} from './request/find-region-cities-request.model';\nimport {FindPlacesNearPlaceRequest} from './request/find-places-near-place-request.model';\nimport {TimeZone} from './model/time-zone.model';\nimport {GetPlaceDistanceRequest} from './request/get-place-distance-request.model';\nimport {FindPlacesNearLocationRequest} from './request/find-places-near-location-request.model';\nimport {GetPlaceDetailsRequest} from './request/get-place-details-request.model';\nimport {GetCountryDetailsRequest} from './request/get-country-details-request.model';\nimport {GetRegionDetailsRequest} from './request/get-region-details-request.model';\nimport {Language} from './model/language.model';\n\n@Injectable()\nexport class GeoDbService {\n  private adminDivisionsEndpoint: string;\n  private countriesEndpoint: string;\n  private currenciesEndpoint: string;\n  private languagesEndpoint: string;\n  private localesEndpoint: string;\n  private placesEndpoint: string;\n  private timeZonesEndpoint: string;\n\n  constructor(private httpClient: HttpClient, private config: GeoDbConfig) {\n\n    this.adminDivisionsEndpoint = config.serviceUri + 'v1/geo/adminDivisions';\n    this.countriesEndpoint = config.serviceUri + '/v1/geo/countries';\n    this.currenciesEndpoint = config.serviceUri + '/v1/locale/currencies';\n    this.languagesEndpoint = config.serviceUri + '/v1/locale/languages';\n    this.localesEndpoint = config.serviceUri + '/v1/locale/locales';\n    this.placesEndpoint = config.serviceUri + '/v1/geo/cities';\n    this.timeZonesEndpoint = config.serviceUri + '/v1/locale/timezones';\n  }\n\n  private static buildPagingParams(request: FindCollectionRequest): HttpParams {\n\n    return new HttpParams()\n      .set('offset', '' + request.offset)\n      .set('limit', '' + request.limit)\n      .set('hateoasMode', 'false');\n  }\n\n  private static toLocationString(nearLocation: NearLocationRequest): string {\n\n    let locationString = '';\n\n    if (nearLocation.latitude > 0) {\n      locationString += '+';\n    }\n\n    locationString += nearLocation.latitude;\n\n    if (nearLocation.longitude > 0) {\n      locationString += '+';\n    }\n\n    locationString += nearLocation.longitude;\n\n    return locationString;\n  }\n\n  findAdminDivisions(request: FindAdminDivisionsRequest): Observable<GeoResponse<PlaceSummary[]>> {\n\n    let params: HttpParams = GeoDbService.buildPagingParams(request);\n\n    if (request.countryIds) {\n      params = params.set('countryIds', request.countryIds.join(','));\n    }\n\n    if (request.excludedCountryIds) {\n      params = params.set('excludedCountryIds', request.excludedCountryIds.join(','));\n    }\n\n    if (request.namePrefix) {\n      params = params.set('namePrefix', request.namePrefix);\n    }\n\n    if (request.minPopulation) {\n      params = params.set('minPopulation', '' + request.minPopulation);\n    }\n\n    if (request.timeZoneIds) {\n      params = params.set('timeZoneIds', request.timeZoneIds.join(','));\n    }\n\n    if (request.asciiMode) {\n      params = params.set('asciiMode', '' + request.asciiMode);\n    }\n\n    if (request.languageCode) {\n      params = params.set('languageCode', request.languageCode);\n    }\n\n    if (request.sortDirectives) {\n      params = params.set('sort', request.sortDirectives.join(','));\n    }\n\n    if (request.includeDeleted) {\n      params = params.set('includeDeleted', request.includeDeleted);\n    }\n\n    return this.httpClient.get<GeoResponse<PlaceSummary[]>>(\n      this.adminDivisionsEndpoint,\n      {\n        params: params\n      }\n    );\n  }\n\n  findPlace(request: GetPlaceDetailsRequest): Observable<GeoResponse<PlaceDetails>> {\n\n    const endpoint = this.buildPlaceEndpoint(request.placeId);\n\n    let params: HttpParams = new HttpParams();\n\n    if (request.asciiMode) {\n      params = params.set('asciiMode', '' + request.asciiMode);\n    }\n\n    if (request.languageCode) {\n      params = params.set('languageCode', request.languageCode);\n    }\n\n    return this.httpClient.get<GeoResponse<PlaceDetails>>(\n      endpoint,\n      {\n        params: params\n      }\n    );\n  }\n\n  findPlaces(request: FindPlacesRequest): Observable<GeoResponse<PlaceSummary[]>> {\n\n    let params: HttpParams = GeoDbService.buildPagingParams(request);\n\n    if (request.countryIds) {\n      params = params.set('countryIds', request.countryIds.join(','));\n    }\n\n    if (request.excludedCountryIds) {\n      params = params.set('excludedCountryIds', request.excludedCountryIds.join(','));\n    }\n\n    if (request.namePrefix) {\n      params = params.set('namePrefix', request.namePrefix);\n    }\n\n    if (request.minPopulation) {\n      params = params.set('minPopulation', '' + request.minPopulation);\n    }\n\n    if (request.timeZoneIds) {\n      params = params.set('timeZoneIds', request.timeZoneIds.join(','));\n    }\n\n    if (request.types) {\n      params = params.set('types', request.types.join(','));\n    }\n\n    if (request.asciiMode) {\n      params = params.set('asciiMode', '' + request.asciiMode);\n    }\n\n    if (request.languageCode) {\n      params = params.set('languageCode', request.languageCode);\n    }\n\n    if (request.sortDirectives) {\n      params = params.set('sort', request.sortDirectives.join(','));\n    }\n\n    if (request.includeDeleted) {\n      params = params.set('includeDeleted', request.includeDeleted);\n    }\n\n    return this.httpClient.get<GeoResponse<PlaceSummary[]>>(\n      this.placesEndpoint,\n      {\n        params: params\n      }\n    );\n  }\n\n  findPlacesNearLocation(request: FindPlacesNearLocationRequest): Observable<GeoResponse<PlaceSummary[]>> {\n\n    let params: HttpParams = GeoDbService.buildPagingParams(request);\n\n    params = params\n      .set('radius', '' + request.location.radius)\n      .set('distanceUnit', request.location.distanceUnit);\n\n    if (request.minPopulation) {\n      params = params.set('minPopulation', '' + request.minPopulation);\n    }\n\n    if (request.namePrefix) {\n      params = params.set('namePrefix', request.namePrefix);\n    }\n\n    if (request.types) {\n      params = params.set('types', request.types.join(','));\n    }\n\n    if (request.asciiMode) {\n      params = params.set('asciiMode', '' + request.asciiMode);\n    }\n\n    if (request.languageCode) {\n      params = params.set('languageCode', request.languageCode);\n    }\n\n    if (request.sortDirectives) {\n      params = params.set('sort', request.sortDirectives.join(','));\n    }\n\n    if (request.includeDeleted) {\n      params = params.set('includeDeleted', request.includeDeleted);\n    }\n\n    // Workaround for HttpClient '+' encoding bug.\n    const locationId = GeoDbService\n      .toLocationString(request.location)\n      .replace('+', '%2B');\n\n    const endpoint = this.placesEndpoint + '?location=' + locationId;\n\n    return this.httpClient.get<GeoResponse<PlaceSummary[]>>(\n      endpoint,\n      {\n        params: params\n      }\n    );\n  }\n\n  findPlacesNearPlace(request: FindPlacesNearPlaceRequest): Observable<GeoResponse<PlaceSummary[]>> {\n\n    let params: HttpParams = GeoDbService.buildPagingParams(request);\n\n    params = params\n      .set('radius', '' + request.radius)\n      .set('distanceUnit', request.distanceUnit);\n\n    if (request.minPopulation) {\n      params = params.set('minPopulation', '' + request.minPopulation);\n    }\n\n    if (request.types) {\n      params = params.set('types', request.types.join(','));\n    }\n\n    if (request.asciiMode) {\n      params = params.set('asciiMode', '' + request.asciiMode);\n    }\n\n    if (request.languageCode) {\n      params = params.set('languageCode', request.languageCode);\n    }\n\n    if (request.sortDirectives) {\n      params = params.set('sort', request.sortDirectives.join(','));\n    }\n\n    if (request.includeDeleted) {\n      params = params.set('includeDeleted', request.includeDeleted);\n    }\n\n    const endpoint = this.placesEndpoint + '/' + request.placeId + '/nearbyCities';\n\n    return this.httpClient.get<GeoResponse<PlaceSummary[]>>(\n      endpoint,\n      {\n        params: params\n      }\n    );\n  }\n\n  findCountries(request: FindCountriesRequest): Observable<GeoResponse<CountrySummary[]>> {\n\n    let params: HttpParams = GeoDbService.buildPagingParams(request);\n\n    if (request.currencyCode) {\n      params = params.set('currencyCode', request.currencyCode);\n    }\n\n    if (request.namePrefix) {\n      params = params.set('namePrefix', request.namePrefix);\n    }\n\n    if (request.asciiMode) {\n      params = params.set('asciiMode', '' + request.asciiMode);\n    }\n\n    if (request.languageCode) {\n      params = params.set('languageCode', request.languageCode);\n    }\n\n    return this.httpClient.get<GeoResponse<CountrySummary[]>>(\n      this.countriesEndpoint,\n      {\n        params: params\n      }\n    );\n  }\n\n  findCountry(request: GetCountryDetailsRequest): Observable<GeoResponse<CountryDetails>> {\n\n    const endpoint = this.countriesEndpoint + '/' + request.countryId;\n\n    let params: HttpParams = new HttpParams();\n\n    if (request.asciiMode) {\n      params = params.set('asciiMode', '' + request.asciiMode);\n    }\n\n    if (request.languageCode) {\n      params = params.set('languageCode', request.languageCode);\n    }\n\n    return this.httpClient.get<GeoResponse<CountryDetails>>(\n      endpoint,\n      {\n        params: params\n      });\n  }\n\n  findCurrencies(request: FindCurrenciesRequest): Observable<GeoResponse<Currency[]>> {\n\n    let params: HttpParams = GeoDbService.buildPagingParams(request);\n\n    if (request.countryId) {\n      params = params.set('countryId', request.countryId);\n    }\n\n    return this.httpClient.get<GeoResponse<Currency[]>>(\n      this.currenciesEndpoint,\n      {\n        params: params\n      }\n    );\n  }\n\n  findLanguages(request: FindCollectionRequest): Observable<GeoResponse<Language[]>> {\n\n    const params: HttpParams = GeoDbService.buildPagingParams(request);\n\n    return this.httpClient.get<GeoResponse<Locale[]>>(\n      this.languagesEndpoint,\n      {\n        params: params\n      }\n    );\n  }\n\n  findLocales(request: FindCollectionRequest): Observable<GeoResponse<Locale[]>> {\n\n    const params: HttpParams = GeoDbService.buildPagingParams(request);\n\n    return this.httpClient.get<GeoResponse<Locale[]>>(\n      this.localesEndpoint,\n      {\n        params: params\n      }\n    );\n  }\n\n  findRegion(request: GetRegionDetailsRequest): Observable<GeoResponse<RegionDetails>> {\n\n    const endpoint = this.buildRegionsEndpoint(request.countryId) + '/' + request.regionCode;\n\n    let params: HttpParams = new HttpParams();\n\n    if (request.asciiMode) {\n      params = params.set('asciiMode', '' + request.asciiMode);\n    }\n\n    if (request.languageCode) {\n      params = params.set('languageCode', request.languageCode);\n    }\n\n    return this.httpClient.get<GeoResponse<RegionDetails>>(\n      endpoint,\n      {\n        params: params\n      });\n  }\n\n  findRegionPlaces(request: FindRegionCitiesRequest): Observable<GeoResponse<PlaceSummary[]>> {\n\n    const endpoint = this.buildRegionEndpoint(request.countryId, request.regionCode) + '/cities';\n\n    let params: HttpParams = GeoDbService.buildPagingParams(request);\n\n    if (request.minPopulation) {\n      params = params.set('minPopulation', '' + request.minPopulation);\n    }\n\n    if (request.types) {\n      params = params.set('types', request.types.join(','));\n    }\n\n    if (request.asciiMode) {\n      params = params.set('asciiMode', '' + request.asciiMode);\n    }\n\n    if (request.languageCode) {\n      params = params.set('languageCode', request.languageCode);\n    }\n\n    if (request.sortDirectives) {\n      params = params.set('sort', request.sortDirectives.join(','));\n    }\n\n    return this.httpClient.get<GeoResponse<PlaceSummary[]>>(\n      endpoint,\n      {\n        params: params\n      }\n    );\n  }\n\n  findRegions(request: FindRegionsRequest): Observable<GeoResponse<RegionSummary[]>> {\n\n    const endpoint = this.buildRegionsEndpoint(request.countryId);\n\n    let params: HttpParams = GeoDbService.buildPagingParams(request);\n\n    if (request.namePrefix) {\n        params = params.set('namePrefix', request.namePrefix);\n    }\n\n    if (request.asciiMode) {\n      params = params.set('asciiMode', '' + request.asciiMode);\n    }\n\n    if (request.languageCode) {\n      params = params.set('languageCode', request.languageCode);\n    }\n\n    return this.httpClient.get<GeoResponse<RegionSummary[]>>(\n      endpoint,\n      {\n        params: params\n      }\n    );\n  }\n\n  findTimeZones(request: FindCollectionRequest): Observable<GeoResponse<TimeZone[]>> {\n\n    const params: HttpParams = GeoDbService.buildPagingParams(request);\n\n    return this.httpClient.get<GeoResponse<TimeZone[]>>(\n      this.timeZonesEndpoint,\n      {\n        params: params\n      }\n    );\n  }\n\n  get apiKey(): string {\n    return this.config.apiKey;\n  }\n\n  setApiKey(apiKey: string) {\n    this.config.apiKey = apiKey;\n  }\n\n  getPlaceDateTime(id: string): Observable<GeoResponse<string>> {\n\n    const endpoint = this.buildPlaceEndpoint(id) + '/dateTime';\n\n    return this.httpClient.get<GeoResponse<string>>(endpoint);\n  }\n\n  getPlaceDistance(request: GetPlaceDistanceRequest): Observable<GeoResponse<number>> {\n\n    const endpoint = this.buildPlaceEndpoint(request.toPlaceId) + '/distance';\n\n    const params: HttpParams = new HttpParams()\n      .set('fromPlaceId', '' + request.fromPlaceId)\n      .set('distanceUnit', '' + request.distanceUnit);\n\n    return this.httpClient.get<GeoResponse<number>>(\n      endpoint,\n      {\n        params: params\n      }\n    );\n  }\n\n  getPlaceTime(placeId: string): Observable<GeoResponse<string>> {\n\n    const endpoint = this.buildPlaceEndpoint(placeId) + '/time';\n\n    return this.httpClient.get<GeoResponse<string>>(endpoint);\n  }\n\n  getTimeZoneDateTime(zoneId: string): Observable<GeoResponse<string>> {\n\n    const endpoint = this.buildTimeZoneEndpoint(zoneId) + '/dateTime';\n\n    return this.httpClient.get<GeoResponse<string>>(endpoint);\n  }\n\n  getTimeZoneTime(zoneId: string): Observable<GeoResponse<string>> {\n\n    const endpoint = this.buildTimeZoneEndpoint(zoneId) + '/time';\n\n    return this.httpClient.get<GeoResponse<string>>(endpoint);\n  }\n\n  private buildPlaceEndpoint(olaceId: string): string {\n    return this.placesEndpoint + '/' + olaceId;\n  }\n\n  private buildRegionEndpoint(countryId: string, regionCode: string): string {\n    return this.buildRegionsEndpoint(countryId) + '/' + regionCode;\n  }\n\n  private buildRegionsEndpoint(countryId: string): string {\n    return this.countriesEndpoint + '/' + countryId + '/regions';\n  }\n\n  private buildTimeZoneEndpoint(zoneId: string): string {\n    return this.timeZonesEndpoint + '/' + zoneId;\n  }\n}\n","import {HttpClientModule, HTTP_INTERCEPTORS} from '@angular/common/http';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {GeoDbService} from './geodb.service';\nimport {GeoDbConfig} from './model/geodb-config.model';\n\n@NgModule({\n  providers: [\n    GeoDbService\n  ],\n  imports: [\n    HttpClientModule\n  ]\n})\nexport class GeoDbFreeModule {\n  static forRoot(config: GeoDbConfig): ModuleWithProviders {\n    return {\n      ngModule: GeoDbFreeModule,\n      providers: [\n        {provide: GeoDbConfig, useValue: config}\n      ]\n    };\n  }\n\n  constructor(config: GeoDbConfig) {\n  }\n}\n","import {HttpEvent, HttpHandler, HttpHeaders, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {GeoDbConfig} from './model/geodb-config.model';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(private config: GeoDbConfig) {\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    if (request.url.startsWith(this.config.serviceUri)) {\n      const headers: HttpHeaders = request\n        .headers\n        .set('X-Mashape-Key', this.config.apiKey);\n\n      return next.handle(request.clone({headers: headers}));\n    }\n\n    return next.handle(request);\n  }\n}\n","import {HttpClientModule, HTTP_INTERCEPTORS} from '@angular/common/http';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {AuthInterceptor} from './auth.interceptor';\nimport {GeoDbService} from './geodb.service';\nimport {GeoDbConfig} from './model/geodb-config.model';\n\n@NgModule({\n  providers: [\n    GeoDbService,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthInterceptor,\n      multi: true\n    }\n  ],\n  imports: [\n    HttpClientModule\n  ]\n})\nexport class GeoDbProModule {\n  static forRoot(config: GeoDbConfig): ModuleWithProviders {\n    return {\n      ngModule: GeoDbProModule,\n      providers: [\n        {provide: GeoDbConfig, useValue: config}\n      ]\n    };\n  }\n\n  constructor(config: GeoDbConfig) {\n  }\n}\n"],"names":[],"mappings":"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"}
