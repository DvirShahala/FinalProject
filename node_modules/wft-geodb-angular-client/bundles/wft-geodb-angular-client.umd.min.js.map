{"version":3,"sources":["ng://wft-geodb-angular-client/lib/model/geodb-config.model.ts","ng://wft-geodb-angular-client/lib/geodb.service.ts","ng://wft-geodb-angular-client/lib/geodb-free.module.ts","ng://wft-geodb-angular-client/lib/auth.interceptor.ts","ng://wft-geodb-angular-client/lib/geodb-pro.module.ts"],"names":["GeoDbConfig","GeoDbService","httpClient","config","this","adminDivisionsEndpoint","serviceUri","countriesEndpoint","currenciesEndpoint","languagesEndpoint","localesEndpoint","placesEndpoint","timeZonesEndpoint","buildPagingParams","request","HttpParams","set","offset","limit","toLocationString","nearLocation","locationString","latitude","longitude","prototype","findAdminDivisions","params","countryIds","join","excludedCountryIds","namePrefix","minPopulation","timeZoneIds","asciiMode","languageCode","sortDirectives","includeDeleted","get","findPlace","endpoint","buildPlaceEndpoint","placeId","findPlaces","types","findPlacesNearLocation","location","radius","distanceUnit","locationId","replace","findPlacesNearPlace","findCountries","currencyCode","findCountry","countryId","findCurrencies","findLanguages","findLocales","findRegion","buildRegionsEndpoint","regionCode","findRegionPlaces","buildRegionEndpoint","findRegions","findTimeZones","Object","defineProperty","apiKey","setApiKey","getPlaceDateTime","id","getPlaceDistance","toPlaceId","fromPlaceId","getPlaceTime","getTimeZoneDateTime","zoneId","buildTimeZoneEndpoint","getTimeZoneTime","olaceId","Injectable","HttpClient","GeoDbFreeModule","forRoot","ngModule","providers","provide","useValue","NgModule","args","imports","HttpClientModule","AuthInterceptor","intercept","next","url","startsWith","headers","handle","clone","GeoDbProModule","HTTP_INTERCEPTORS","useClass","multi"],"mappings":"wWAAA,IAAAA,EAAA,SAAAA,MCEAC,EAAA,WAyCE,SAAAA,EAAoBC,EAAgCC,GAAhCC,KAAAF,WAAAA,EAAgCE,KAAAD,OAAAA,EAElDC,KAAKC,uBAAyBF,EAAOG,WAAa,wBAClDF,KAAKG,kBAAoBJ,EAAOG,WAAa,oBAC7CF,KAAKI,mBAAqBL,EAAOG,WAAa,wBAC9CF,KAAKK,kBAAoBN,EAAOG,WAAa,uBAC7CF,KAAKM,gBAAkBP,EAAOG,WAAa,qBAC3CF,KAAKO,eAAiBR,EAAOG,WAAa,iBAC1CF,KAAKQ,kBAAoBT,EAAOG,WAAa,uBA8ejD,OA3eiBL,EAAAY,kBAAf,SAAiCC,GAE/B,OAAO,IAAIC,EAAAA,YACRC,IAAI,SAAU,GAAKF,EAAQG,QAC3BD,IAAI,QAAS,GAAKF,EAAQI,OAC1BF,IAAI,cAAe,UAGTf,EAAAkB,iBAAf,SAAgCC,OAE1BC,EAAiB,GAcrB,OAZ4B,EAAxBD,EAAaE,WACfD,GAAkB,KAGpBA,GAAkBD,EAAaE,SAEF,EAAzBF,EAAaG,YACfF,GAAkB,KAGpBA,GAAkBD,EAAaG,WAKjCtB,EAAAuB,UAAAC,mBAAA,SAAmBX,OAEbY,EAAqBzB,EAAaY,kBAAkBC,GAsCxD,OApCIA,EAAQa,aACVD,EAASA,EAAOV,IAAI,aAAcF,EAAQa,WAAWC,KAAK,OAGxDd,EAAQe,qBACVH,EAASA,EAAOV,IAAI,qBAAsBF,EAAQe,mBAAmBD,KAAK,OAGxEd,EAAQgB,aACVJ,EAASA,EAAOV,IAAI,aAAcF,EAAQgB,aAGxChB,EAAQiB,gBACVL,EAASA,EAAOV,IAAI,gBAAiB,GAAKF,EAAQiB,gBAGhDjB,EAAQkB,cACVN,EAASA,EAAOV,IAAI,cAAeF,EAAQkB,YAAYJ,KAAK,OAG1Dd,EAAQmB,YACVP,EAASA,EAAOV,IAAI,YAAa,GAAKF,EAAQmB,YAG5CnB,EAAQoB,eACVR,EAASA,EAAOV,IAAI,eAAgBF,EAAQoB,eAG1CpB,EAAQqB,iBACVT,EAASA,EAAOV,IAAI,OAAQF,EAAQqB,eAAeP,KAAK,OAGtDd,EAAQsB,iBACVV,EAASA,EAAOV,IAAI,iBAAkBF,EAAQsB,iBAGzChC,KAAKF,WAAWmC,IACrBjC,KAAKC,uBACL,CACEqB,OAAQA,KAKdzB,EAAAuB,UAAAc,UAAA,SAAUxB,OAEFyB,EAAWnC,KAAKoC,mBAAmB1B,EAAQ2B,SAE7Cf,EAAqB,IAAIX,EAAAA,WAU7B,OARID,EAAQmB,YACVP,EAASA,EAAOV,IAAI,YAAa,GAAKF,EAAQmB,YAG5CnB,EAAQoB,eACVR,EAASA,EAAOV,IAAI,eAAgBF,EAAQoB,eAGvC9B,KAAKF,WAAWmC,IACrBE,EACA,CACEb,OAAQA,KAKdzB,EAAAuB,UAAAkB,WAAA,SAAW5B,OAELY,EAAqBzB,EAAaY,kBAAkBC,GA0CxD,OAxCIA,EAAQa,aACVD,EAASA,EAAOV,IAAI,aAAcF,EAAQa,WAAWC,KAAK,OAGxDd,EAAQe,qBACVH,EAASA,EAAOV,IAAI,qBAAsBF,EAAQe,mBAAmBD,KAAK,OAGxEd,EAAQgB,aACVJ,EAASA,EAAOV,IAAI,aAAcF,EAAQgB,aAGxChB,EAAQiB,gBACVL,EAASA,EAAOV,IAAI,gBAAiB,GAAKF,EAAQiB,gBAGhDjB,EAAQkB,cACVN,EAASA,EAAOV,IAAI,cAAeF,EAAQkB,YAAYJ,KAAK,OAG1Dd,EAAQ6B,QACVjB,EAASA,EAAOV,IAAI,QAASF,EAAQ6B,MAAMf,KAAK,OAG9Cd,EAAQmB,YACVP,EAASA,EAAOV,IAAI,YAAa,GAAKF,EAAQmB,YAG5CnB,EAAQoB,eACVR,EAASA,EAAOV,IAAI,eAAgBF,EAAQoB,eAG1CpB,EAAQqB,iBACVT,EAASA,EAAOV,IAAI,OAAQF,EAAQqB,eAAeP,KAAK,OAGtDd,EAAQsB,iBACVV,EAASA,EAAOV,IAAI,iBAAkBF,EAAQsB,iBAGzChC,KAAKF,WAAWmC,IACrBjC,KAAKO,eACL,CACEe,OAAQA,KAKdzB,EAAAuB,UAAAoB,uBAAA,SAAuB9B,OAEjBY,EAAqBzB,EAAaY,kBAAkBC,GAExDY,EAASA,EACNV,IAAI,SAAU,GAAKF,EAAQ+B,SAASC,QACpC9B,IAAI,eAAgBF,EAAQ+B,SAASE,cAEpCjC,EAAQiB,gBACVL,EAASA,EAAOV,IAAI,gBAAiB,GAAKF,EAAQiB,gBAGhDjB,EAAQgB,aACVJ,EAASA,EAAOV,IAAI,aAAcF,EAAQgB,aAGxChB,EAAQ6B,QACVjB,EAASA,EAAOV,IAAI,QAASF,EAAQ6B,MAAMf,KAAK,OAG9Cd,EAAQmB,YACVP,EAASA,EAAOV,IAAI,YAAa,GAAKF,EAAQmB,YAG5CnB,EAAQoB,eACVR,EAASA,EAAOV,IAAI,eAAgBF,EAAQoB,eAG1CpB,EAAQqB,iBACVT,EAASA,EAAOV,IAAI,OAAQF,EAAQqB,eAAeP,KAAK,OAGtDd,EAAQsB,iBACVV,EAASA,EAAOV,IAAI,iBAAkBF,EAAQsB,qBAI1CY,EAAa/C,EAChBkB,iBAAiBL,EAAQ+B,UACzBI,QAAQ,IAAK,OAEVV,EAAWnC,KAAKO,eAAiB,aAAeqC,EAEtD,OAAO5C,KAAKF,WAAWmC,IACrBE,EACA,CACEb,OAAQA,KAKdzB,EAAAuB,UAAA0B,oBAAA,SAAoBpC,OAEdY,EAAqBzB,EAAaY,kBAAkBC,GAExDY,EAASA,EACNV,IAAI,SAAU,GAAKF,EAAQgC,QAC3B9B,IAAI,eAAgBF,EAAQiC,cAE3BjC,EAAQiB,gBACVL,EAASA,EAAOV,IAAI,gBAAiB,GAAKF,EAAQiB,gBAGhDjB,EAAQ6B,QACVjB,EAASA,EAAOV,IAAI,QAASF,EAAQ6B,MAAMf,KAAK,OAG9Cd,EAAQmB,YACVP,EAASA,EAAOV,IAAI,YAAa,GAAKF,EAAQmB,YAG5CnB,EAAQoB,eACVR,EAASA,EAAOV,IAAI,eAAgBF,EAAQoB,eAG1CpB,EAAQqB,iBACVT,EAASA,EAAOV,IAAI,OAAQF,EAAQqB,eAAeP,KAAK,OAGtDd,EAAQsB,iBACVV,EAASA,EAAOV,IAAI,iBAAkBF,EAAQsB,qBAG1CG,EAAWnC,KAAKO,eAAiB,IAAMG,EAAQ2B,QAAU,gBAE/D,OAAOrC,KAAKF,WAAWmC,IACrBE,EACA,CACEb,OAAQA,KAKdzB,EAAAuB,UAAA2B,cAAA,SAAcrC,OAERY,EAAqBzB,EAAaY,kBAAkBC,GAkBxD,OAhBIA,EAAQsC,eACV1B,EAASA,EAAOV,IAAI,eAAgBF,EAAQsC,eAG1CtC,EAAQgB,aACVJ,EAASA,EAAOV,IAAI,aAAcF,EAAQgB,aAGxChB,EAAQmB,YACVP,EAASA,EAAOV,IAAI,YAAa,GAAKF,EAAQmB,YAG5CnB,EAAQoB,eACVR,EAASA,EAAOV,IAAI,eAAgBF,EAAQoB,eAGvC9B,KAAKF,WAAWmC,IACrBjC,KAAKG,kBACL,CACEmB,OAAQA,KAKdzB,EAAAuB,UAAA6B,YAAA,SAAYvC,OAEJyB,EAAWnC,KAAKG,kBAAoB,IAAMO,EAAQwC,UAEpD5B,EAAqB,IAAIX,EAAAA,WAU7B,OARID,EAAQmB,YACVP,EAASA,EAAOV,IAAI,YAAa,GAAKF,EAAQmB,YAG5CnB,EAAQoB,eACVR,EAASA,EAAOV,IAAI,eAAgBF,EAAQoB,eAGvC9B,KAAKF,WAAWmC,IACrBE,EACA,CACEb,OAAQA,KAIdzB,EAAAuB,UAAA+B,eAAA,SAAezC,OAETY,EAAqBzB,EAAaY,kBAAkBC,GAMxD,OAJIA,EAAQwC,YACV5B,EAASA,EAAOV,IAAI,YAAaF,EAAQwC,YAGpClD,KAAKF,WAAWmC,IACrBjC,KAAKI,mBACL,CACEkB,OAAQA,KAKdzB,EAAAuB,UAAAgC,cAAA,SAAc1C,OAENY,EAAqBzB,EAAaY,kBAAkBC,GAE1D,OAAOV,KAAKF,WAAWmC,IACrBjC,KAAKK,kBACL,CACEiB,OAAQA,KAKdzB,EAAAuB,UAAAiC,YAAA,SAAY3C,OAEJY,EAAqBzB,EAAaY,kBAAkBC,GAE1D,OAAOV,KAAKF,WAAWmC,IACrBjC,KAAKM,gBACL,CACEgB,OAAQA,KAKdzB,EAAAuB,UAAAkC,WAAA,SAAW5C,OAEHyB,EAAWnC,KAAKuD,qBAAqB7C,EAAQwC,WAAa,IAAMxC,EAAQ8C,WAE1ElC,EAAqB,IAAIX,EAAAA,WAU7B,OARID,EAAQmB,YACVP,EAASA,EAAOV,IAAI,YAAa,GAAKF,EAAQmB,YAG5CnB,EAAQoB,eACVR,EAASA,EAAOV,IAAI,eAAgBF,EAAQoB,eAGvC9B,KAAKF,WAAWmC,IACrBE,EACA,CACEb,OAAQA,KAIdzB,EAAAuB,UAAAqC,iBAAA,SAAiB/C,OAETyB,EAAWnC,KAAK0D,oBAAoBhD,EAAQwC,UAAWxC,EAAQ8C,YAAc,UAE/ElC,EAAqBzB,EAAaY,kBAAkBC,GAsBxD,OApBIA,EAAQiB,gBACVL,EAASA,EAAOV,IAAI,gBAAiB,GAAKF,EAAQiB,gBAGhDjB,EAAQ6B,QACVjB,EAASA,EAAOV,IAAI,QAASF,EAAQ6B,MAAMf,KAAK,OAG9Cd,EAAQmB,YACVP,EAASA,EAAOV,IAAI,YAAa,GAAKF,EAAQmB,YAG5CnB,EAAQoB,eACVR,EAASA,EAAOV,IAAI,eAAgBF,EAAQoB,eAG1CpB,EAAQqB,iBACVT,EAASA,EAAOV,IAAI,OAAQF,EAAQqB,eAAeP,KAAK,OAGnDxB,KAAKF,WAAWmC,IACrBE,EACA,CACEb,OAAQA,KAKdzB,EAAAuB,UAAAuC,YAAA,SAAYjD,OAEJyB,EAAWnC,KAAKuD,qBAAqB7C,EAAQwC,WAE/C5B,EAAqBzB,EAAaY,kBAAkBC,GAcxD,OAZIA,EAAQgB,aACRJ,EAASA,EAAOV,IAAI,aAAcF,EAAQgB,aAG1ChB,EAAQmB,YACVP,EAASA,EAAOV,IAAI,YAAa,GAAKF,EAAQmB,YAG5CnB,EAAQoB,eACVR,EAASA,EAAOV,IAAI,eAAgBF,EAAQoB,eAGvC9B,KAAKF,WAAWmC,IACrBE,EACA,CACEb,OAAQA,KAKdzB,EAAAuB,UAAAwC,cAAA,SAAclD,OAENY,EAAqBzB,EAAaY,kBAAkBC,GAE1D,OAAOV,KAAKF,WAAWmC,IACrBjC,KAAKQ,kBACL,CACEc,OAAQA,KAKduC,OAAAC,eAAIjE,EAAAuB,UAAA,SAAM,KAAV,WACE,OAAOpB,KAAKD,OAAOgE,wCAGrBlE,EAAAuB,UAAA4C,UAAA,SAAUD,GACR/D,KAAKD,OAAOgE,OAASA,GAGvBlE,EAAAuB,UAAA6C,iBAAA,SAAiBC,OAET/B,EAAWnC,KAAKoC,mBAAmB8B,GAAM,YAE/C,OAAOlE,KAAKF,WAAWmC,IAAyBE,IAGlDtC,EAAAuB,UAAA+C,iBAAA,SAAiBzD,OAETyB,EAAWnC,KAAKoC,mBAAmB1B,EAAQ0D,WAAa,YAExD9C,GAAqB,IAAIX,EAAAA,YAC5BC,IAAI,cAAe,GAAKF,EAAQ2D,aAChCzD,IAAI,eAAgB,GAAKF,EAAQiC,cAEpC,OAAO3C,KAAKF,WAAWmC,IACrBE,EACA,CACEb,OAAQA,KAKdzB,EAAAuB,UAAAkD,aAAA,SAAajC,OAELF,EAAWnC,KAAKoC,mBAAmBC,GAAW,QAEpD,OAAOrC,KAAKF,WAAWmC,IAAyBE,IAGlDtC,EAAAuB,UAAAmD,oBAAA,SAAoBC,OAEZrC,EAAWnC,KAAKyE,sBAAsBD,GAAU,YAEtD,OAAOxE,KAAKF,WAAWmC,IAAyBE,IAGlDtC,EAAAuB,UAAAsD,gBAAA,SAAgBF,OAERrC,EAAWnC,KAAKyE,sBAAsBD,GAAU,QAEtD,OAAOxE,KAAKF,WAAWmC,IAAyBE,IAG1CtC,EAAAuB,UAAAgB,mBAAR,SAA2BuC,GACzB,OAAO3E,KAAKO,eAAiB,IAAMoE,GAG7B9E,EAAAuB,UAAAsC,oBAAR,SAA4BR,EAAmBM,GAC7C,OAAOxD,KAAKuD,qBAAqBL,GAAa,IAAMM,GAG9C3D,EAAAuB,UAAAmC,qBAAR,SAA6BL,GAC3B,OAAOlD,KAAKG,kBAAoB,IAAM+C,EAAY,YAG5CrD,EAAAuB,UAAAqD,sBAAR,SAA8BD,GAC5B,OAAOxE,KAAKQ,kBAAoB,IAAMgE,uBA9fzCI,EAAAA,sDA/BOC,EAAAA,kBAUAjF,KAqhBRC,EA/hBA,GCFAiF,EAAA,WAwBE,SAAAA,EAAY/E,IAEd,OAXS+E,EAAAC,QAAP,SAAehF,GACb,MAAO,CACLiF,SAAUF,EACVG,UAAW,CACT,CAACC,QAAStF,EAAauF,SAAUpF,0BAbxCqF,EAAAA,SAAQC,KAAA,CAAC,CACRJ,UAAW,CACTpF,GAEFyF,QAAS,CACPC,EAAAA,+DAPI3F,KAsBRkF,EA1BA,GCCAU,EAAA,WAQE,SAAAA,EAAoBzF,GAAAC,KAAAD,OAAAA,EAetB,OAZEyF,EAAApE,UAAAqE,UAAA,SAAU/E,EAA2BgF,GAEnC,GAAIhF,EAAQiF,IAAIC,WAAW5F,KAAKD,OAAOG,YAAa,KAC5C2F,EAAuBnF,EAC1BmF,QACAjF,IAAI,gBAAiBZ,KAAKD,OAAOgE,QAEpC,OAAO2B,EAAKI,OAAOpF,EAAQqF,MAAM,CAACF,QAASA,KAG7C,OAAOH,EAAKI,OAAOpF,wBAhBtBkE,EAAAA,sDAFOhF,KAoBR4F,EAvBA,GCDAQ,EAAA,WA8BE,SAAAA,EAAYjG,IAEd,OAXSiG,EAAAjB,QAAP,SAAehF,GACb,MAAO,CACLiF,SAAUgB,EACVf,UAAW,CACT,CAACC,QAAStF,EAAauF,SAAUpF,0BAlBxCqF,EAAAA,SAAQC,KAAA,CAAC,CACRJ,UAAW,CACTpF,EACA,CACEqF,QAASe,EAAAA,kBACTC,SAAUV,EACVW,OAAO,IAGXb,QAAS,CACPC,EAAAA,+DAZI3F,KA2BRoG,EAhCA","sourcesContent":["export class GeoDbConfig {\n  apiKey: string;\n  serviceUri: string;\n}\n","import {Observable} from 'rxjs';\n\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\n\nimport {PlaceDetails} from './model/place-details.model';\nimport {PlaceSummary} from './model/place-summary.model';\nimport {CountrySummary} from './model/country-summary.model';\nimport {GeoResponse} from './model/geo-response.model';\nimport {NearLocationRequest} from './request/near-location-request.model';\nimport {RegionSummary} from './model/region-summary.model';\n\nimport {GeoDbConfig} from './model/geodb-config.model';\nimport {CountryDetails} from './model/country-details.model';\nimport {RegionDetails} from './model/region-details.model';\nimport {Currency} from './model/currency.model';\nimport {Locale} from './model/locale.model';\nimport {FindAdminDivisionsRequest} from './request/find-admin-divisions-request.model';\nimport {FindPlacesRequest} from './request/find-places-request.model';\nimport {FindCollectionRequest} from './request/find-collection-request.model';\nimport {FindCountriesRequest} from './request/find-countries-request.model';\nimport {FindCurrenciesRequest} from './request/find-currencies-request.model';\nimport {FindRegionsRequest} from './request/find-regions-request.model';\nimport {FindRegionCitiesRequest} from './request/find-region-cities-request.model';\nimport {FindPlacesNearPlaceRequest} from './request/find-places-near-place-request.model';\nimport {TimeZone} from './model/time-zone.model';\nimport {GetPlaceDistanceRequest} from './request/get-place-distance-request.model';\nimport {FindPlacesNearLocationRequest} from './request/find-places-near-location-request.model';\nimport {GetPlaceDetailsRequest} from './request/get-place-details-request.model';\nimport {GetCountryDetailsRequest} from './request/get-country-details-request.model';\nimport {GetRegionDetailsRequest} from './request/get-region-details-request.model';\nimport {Language} from './model/language.model';\n\n@Injectable()\nexport class GeoDbService {\n  private adminDivisionsEndpoint: string;\n  private countriesEndpoint: string;\n  private currenciesEndpoint: string;\n  private languagesEndpoint: string;\n  private localesEndpoint: string;\n  private placesEndpoint: string;\n  private timeZonesEndpoint: string;\n\n  constructor(private httpClient: HttpClient, private config: GeoDbConfig) {\n\n    this.adminDivisionsEndpoint = config.serviceUri + 'v1/geo/adminDivisions';\n    this.countriesEndpoint = config.serviceUri + '/v1/geo/countries';\n    this.currenciesEndpoint = config.serviceUri + '/v1/locale/currencies';\n    this.languagesEndpoint = config.serviceUri + '/v1/locale/languages';\n    this.localesEndpoint = config.serviceUri + '/v1/locale/locales';\n    this.placesEndpoint = config.serviceUri + '/v1/geo/cities';\n    this.timeZonesEndpoint = config.serviceUri + '/v1/locale/timezones';\n  }\n\n  private static buildPagingParams(request: FindCollectionRequest): HttpParams {\n\n    return new HttpParams()\n      .set('offset', '' + request.offset)\n      .set('limit', '' + request.limit)\n      .set('hateoasMode', 'false');\n  }\n\n  private static toLocationString(nearLocation: NearLocationRequest): string {\n\n    let locationString = '';\n\n    if (nearLocation.latitude > 0) {\n      locationString += '+';\n    }\n\n    locationString += nearLocation.latitude;\n\n    if (nearLocation.longitude > 0) {\n      locationString += '+';\n    }\n\n    locationString += nearLocation.longitude;\n\n    return locationString;\n  }\n\n  findAdminDivisions(request: FindAdminDivisionsRequest): Observable<GeoResponse<PlaceSummary[]>> {\n\n    let params: HttpParams = GeoDbService.buildPagingParams(request);\n\n    if (request.countryIds) {\n      params = params.set('countryIds', request.countryIds.join(','));\n    }\n\n    if (request.excludedCountryIds) {\n      params = params.set('excludedCountryIds', request.excludedCountryIds.join(','));\n    }\n\n    if (request.namePrefix) {\n      params = params.set('namePrefix', request.namePrefix);\n    }\n\n    if (request.minPopulation) {\n      params = params.set('minPopulation', '' + request.minPopulation);\n    }\n\n    if (request.timeZoneIds) {\n      params = params.set('timeZoneIds', request.timeZoneIds.join(','));\n    }\n\n    if (request.asciiMode) {\n      params = params.set('asciiMode', '' + request.asciiMode);\n    }\n\n    if (request.languageCode) {\n      params = params.set('languageCode', request.languageCode);\n    }\n\n    if (request.sortDirectives) {\n      params = params.set('sort', request.sortDirectives.join(','));\n    }\n\n    if (request.includeDeleted) {\n      params = params.set('includeDeleted', request.includeDeleted);\n    }\n\n    return this.httpClient.get<GeoResponse<PlaceSummary[]>>(\n      this.adminDivisionsEndpoint,\n      {\n        params: params\n      }\n    );\n  }\n\n  findPlace(request: GetPlaceDetailsRequest): Observable<GeoResponse<PlaceDetails>> {\n\n    const endpoint = this.buildPlaceEndpoint(request.placeId);\n\n    let params: HttpParams = new HttpParams();\n\n    if (request.asciiMode) {\n      params = params.set('asciiMode', '' + request.asciiMode);\n    }\n\n    if (request.languageCode) {\n      params = params.set('languageCode', request.languageCode);\n    }\n\n    return this.httpClient.get<GeoResponse<PlaceDetails>>(\n      endpoint,\n      {\n        params: params\n      }\n    );\n  }\n\n  findPlaces(request: FindPlacesRequest): Observable<GeoResponse<PlaceSummary[]>> {\n\n    let params: HttpParams = GeoDbService.buildPagingParams(request);\n\n    if (request.countryIds) {\n      params = params.set('countryIds', request.countryIds.join(','));\n    }\n\n    if (request.excludedCountryIds) {\n      params = params.set('excludedCountryIds', request.excludedCountryIds.join(','));\n    }\n\n    if (request.namePrefix) {\n      params = params.set('namePrefix', request.namePrefix);\n    }\n\n    if (request.minPopulation) {\n      params = params.set('minPopulation', '' + request.minPopulation);\n    }\n\n    if (request.timeZoneIds) {\n      params = params.set('timeZoneIds', request.timeZoneIds.join(','));\n    }\n\n    if (request.types) {\n      params = params.set('types', request.types.join(','));\n    }\n\n    if (request.asciiMode) {\n      params = params.set('asciiMode', '' + request.asciiMode);\n    }\n\n    if (request.languageCode) {\n      params = params.set('languageCode', request.languageCode);\n    }\n\n    if (request.sortDirectives) {\n      params = params.set('sort', request.sortDirectives.join(','));\n    }\n\n    if (request.includeDeleted) {\n      params = params.set('includeDeleted', request.includeDeleted);\n    }\n\n    return this.httpClient.get<GeoResponse<PlaceSummary[]>>(\n      this.placesEndpoint,\n      {\n        params: params\n      }\n    );\n  }\n\n  findPlacesNearLocation(request: FindPlacesNearLocationRequest): Observable<GeoResponse<PlaceSummary[]>> {\n\n    let params: HttpParams = GeoDbService.buildPagingParams(request);\n\n    params = params\n      .set('radius', '' + request.location.radius)\n      .set('distanceUnit', request.location.distanceUnit);\n\n    if (request.minPopulation) {\n      params = params.set('minPopulation', '' + request.minPopulation);\n    }\n\n    if (request.namePrefix) {\n      params = params.set('namePrefix', request.namePrefix);\n    }\n\n    if (request.types) {\n      params = params.set('types', request.types.join(','));\n    }\n\n    if (request.asciiMode) {\n      params = params.set('asciiMode', '' + request.asciiMode);\n    }\n\n    if (request.languageCode) {\n      params = params.set('languageCode', request.languageCode);\n    }\n\n    if (request.sortDirectives) {\n      params = params.set('sort', request.sortDirectives.join(','));\n    }\n\n    if (request.includeDeleted) {\n      params = params.set('includeDeleted', request.includeDeleted);\n    }\n\n    // Workaround for HttpClient '+' encoding bug.\n    const locationId = GeoDbService\n      .toLocationString(request.location)\n      .replace('+', '%2B');\n\n    const endpoint = this.placesEndpoint + '?location=' + locationId;\n\n    return this.httpClient.get<GeoResponse<PlaceSummary[]>>(\n      endpoint,\n      {\n        params: params\n      }\n    );\n  }\n\n  findPlacesNearPlace(request: FindPlacesNearPlaceRequest): Observable<GeoResponse<PlaceSummary[]>> {\n\n    let params: HttpParams = GeoDbService.buildPagingParams(request);\n\n    params = params\n      .set('radius', '' + request.radius)\n      .set('distanceUnit', request.distanceUnit);\n\n    if (request.minPopulation) {\n      params = params.set('minPopulation', '' + request.minPopulation);\n    }\n\n    if (request.types) {\n      params = params.set('types', request.types.join(','));\n    }\n\n    if (request.asciiMode) {\n      params = params.set('asciiMode', '' + request.asciiMode);\n    }\n\n    if (request.languageCode) {\n      params = params.set('languageCode', request.languageCode);\n    }\n\n    if (request.sortDirectives) {\n      params = params.set('sort', request.sortDirectives.join(','));\n    }\n\n    if (request.includeDeleted) {\n      params = params.set('includeDeleted', request.includeDeleted);\n    }\n\n    const endpoint = this.placesEndpoint + '/' + request.placeId + '/nearbyCities';\n\n    return this.httpClient.get<GeoResponse<PlaceSummary[]>>(\n      endpoint,\n      {\n        params: params\n      }\n    );\n  }\n\n  findCountries(request: FindCountriesRequest): Observable<GeoResponse<CountrySummary[]>> {\n\n    let params: HttpParams = GeoDbService.buildPagingParams(request);\n\n    if (request.currencyCode) {\n      params = params.set('currencyCode', request.currencyCode);\n    }\n\n    if (request.namePrefix) {\n      params = params.set('namePrefix', request.namePrefix);\n    }\n\n    if (request.asciiMode) {\n      params = params.set('asciiMode', '' + request.asciiMode);\n    }\n\n    if (request.languageCode) {\n      params = params.set('languageCode', request.languageCode);\n    }\n\n    return this.httpClient.get<GeoResponse<CountrySummary[]>>(\n      this.countriesEndpoint,\n      {\n        params: params\n      }\n    );\n  }\n\n  findCountry(request: GetCountryDetailsRequest): Observable<GeoResponse<CountryDetails>> {\n\n    const endpoint = this.countriesEndpoint + '/' + request.countryId;\n\n    let params: HttpParams = new HttpParams();\n\n    if (request.asciiMode) {\n      params = params.set('asciiMode', '' + request.asciiMode);\n    }\n\n    if (request.languageCode) {\n      params = params.set('languageCode', request.languageCode);\n    }\n\n    return this.httpClient.get<GeoResponse<CountryDetails>>(\n      endpoint,\n      {\n        params: params\n      });\n  }\n\n  findCurrencies(request: FindCurrenciesRequest): Observable<GeoResponse<Currency[]>> {\n\n    let params: HttpParams = GeoDbService.buildPagingParams(request);\n\n    if (request.countryId) {\n      params = params.set('countryId', request.countryId);\n    }\n\n    return this.httpClient.get<GeoResponse<Currency[]>>(\n      this.currenciesEndpoint,\n      {\n        params: params\n      }\n    );\n  }\n\n  findLanguages(request: FindCollectionRequest): Observable<GeoResponse<Language[]>> {\n\n    const params: HttpParams = GeoDbService.buildPagingParams(request);\n\n    return this.httpClient.get<GeoResponse<Locale[]>>(\n      this.languagesEndpoint,\n      {\n        params: params\n      }\n    );\n  }\n\n  findLocales(request: FindCollectionRequest): Observable<GeoResponse<Locale[]>> {\n\n    const params: HttpParams = GeoDbService.buildPagingParams(request);\n\n    return this.httpClient.get<GeoResponse<Locale[]>>(\n      this.localesEndpoint,\n      {\n        params: params\n      }\n    );\n  }\n\n  findRegion(request: GetRegionDetailsRequest): Observable<GeoResponse<RegionDetails>> {\n\n    const endpoint = this.buildRegionsEndpoint(request.countryId) + '/' + request.regionCode;\n\n    let params: HttpParams = new HttpParams();\n\n    if (request.asciiMode) {\n      params = params.set('asciiMode', '' + request.asciiMode);\n    }\n\n    if (request.languageCode) {\n      params = params.set('languageCode', request.languageCode);\n    }\n\n    return this.httpClient.get<GeoResponse<RegionDetails>>(\n      endpoint,\n      {\n        params: params\n      });\n  }\n\n  findRegionPlaces(request: FindRegionCitiesRequest): Observable<GeoResponse<PlaceSummary[]>> {\n\n    const endpoint = this.buildRegionEndpoint(request.countryId, request.regionCode) + '/cities';\n\n    let params: HttpParams = GeoDbService.buildPagingParams(request);\n\n    if (request.minPopulation) {\n      params = params.set('minPopulation', '' + request.minPopulation);\n    }\n\n    if (request.types) {\n      params = params.set('types', request.types.join(','));\n    }\n\n    if (request.asciiMode) {\n      params = params.set('asciiMode', '' + request.asciiMode);\n    }\n\n    if (request.languageCode) {\n      params = params.set('languageCode', request.languageCode);\n    }\n\n    if (request.sortDirectives) {\n      params = params.set('sort', request.sortDirectives.join(','));\n    }\n\n    return this.httpClient.get<GeoResponse<PlaceSummary[]>>(\n      endpoint,\n      {\n        params: params\n      }\n    );\n  }\n\n  findRegions(request: FindRegionsRequest): Observable<GeoResponse<RegionSummary[]>> {\n\n    const endpoint = this.buildRegionsEndpoint(request.countryId);\n\n    let params: HttpParams = GeoDbService.buildPagingParams(request);\n\n    if (request.namePrefix) {\n        params = params.set('namePrefix', request.namePrefix);\n    }\n\n    if (request.asciiMode) {\n      params = params.set('asciiMode', '' + request.asciiMode);\n    }\n\n    if (request.languageCode) {\n      params = params.set('languageCode', request.languageCode);\n    }\n\n    return this.httpClient.get<GeoResponse<RegionSummary[]>>(\n      endpoint,\n      {\n        params: params\n      }\n    );\n  }\n\n  findTimeZones(request: FindCollectionRequest): Observable<GeoResponse<TimeZone[]>> {\n\n    const params: HttpParams = GeoDbService.buildPagingParams(request);\n\n    return this.httpClient.get<GeoResponse<TimeZone[]>>(\n      this.timeZonesEndpoint,\n      {\n        params: params\n      }\n    );\n  }\n\n  get apiKey(): string {\n    return this.config.apiKey;\n  }\n\n  setApiKey(apiKey: string) {\n    this.config.apiKey = apiKey;\n  }\n\n  getPlaceDateTime(id: string): Observable<GeoResponse<string>> {\n\n    const endpoint = this.buildPlaceEndpoint(id) + '/dateTime';\n\n    return this.httpClient.get<GeoResponse<string>>(endpoint);\n  }\n\n  getPlaceDistance(request: GetPlaceDistanceRequest): Observable<GeoResponse<number>> {\n\n    const endpoint = this.buildPlaceEndpoint(request.toPlaceId) + '/distance';\n\n    const params: HttpParams = new HttpParams()\n      .set('fromPlaceId', '' + request.fromPlaceId)\n      .set('distanceUnit', '' + request.distanceUnit);\n\n    return this.httpClient.get<GeoResponse<number>>(\n      endpoint,\n      {\n        params: params\n      }\n    );\n  }\n\n  getPlaceTime(placeId: string): Observable<GeoResponse<string>> {\n\n    const endpoint = this.buildPlaceEndpoint(placeId) + '/time';\n\n    return this.httpClient.get<GeoResponse<string>>(endpoint);\n  }\n\n  getTimeZoneDateTime(zoneId: string): Observable<GeoResponse<string>> {\n\n    const endpoint = this.buildTimeZoneEndpoint(zoneId) + '/dateTime';\n\n    return this.httpClient.get<GeoResponse<string>>(endpoint);\n  }\n\n  getTimeZoneTime(zoneId: string): Observable<GeoResponse<string>> {\n\n    const endpoint = this.buildTimeZoneEndpoint(zoneId) + '/time';\n\n    return this.httpClient.get<GeoResponse<string>>(endpoint);\n  }\n\n  private buildPlaceEndpoint(olaceId: string): string {\n    return this.placesEndpoint + '/' + olaceId;\n  }\n\n  private buildRegionEndpoint(countryId: string, regionCode: string): string {\n    return this.buildRegionsEndpoint(countryId) + '/' + regionCode;\n  }\n\n  private buildRegionsEndpoint(countryId: string): string {\n    return this.countriesEndpoint + '/' + countryId + '/regions';\n  }\n\n  private buildTimeZoneEndpoint(zoneId: string): string {\n    return this.timeZonesEndpoint + '/' + zoneId;\n  }\n}\n","import {HttpClientModule, HTTP_INTERCEPTORS} from '@angular/common/http';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {GeoDbService} from './geodb.service';\nimport {GeoDbConfig} from './model/geodb-config.model';\n\n@NgModule({\n  providers: [\n    GeoDbService\n  ],\n  imports: [\n    HttpClientModule\n  ]\n})\nexport class GeoDbFreeModule {\n  static forRoot(config: GeoDbConfig): ModuleWithProviders {\n    return {\n      ngModule: GeoDbFreeModule,\n      providers: [\n        {provide: GeoDbConfig, useValue: config}\n      ]\n    };\n  }\n\n  constructor(config: GeoDbConfig) {\n  }\n}\n","import {HttpEvent, HttpHandler, HttpHeaders, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {GeoDbConfig} from './model/geodb-config.model';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(private config: GeoDbConfig) {\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    if (request.url.startsWith(this.config.serviceUri)) {\n      const headers: HttpHeaders = request\n        .headers\n        .set('X-Mashape-Key', this.config.apiKey);\n\n      return next.handle(request.clone({headers: headers}));\n    }\n\n    return next.handle(request);\n  }\n}\n","import {HttpClientModule, HTTP_INTERCEPTORS} from '@angular/common/http';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {AuthInterceptor} from './auth.interceptor';\nimport {GeoDbService} from './geodb.service';\nimport {GeoDbConfig} from './model/geodb-config.model';\n\n@NgModule({\n  providers: [\n    GeoDbService,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthInterceptor,\n      multi: true\n    }\n  ],\n  imports: [\n    HttpClientModule\n  ]\n})\nexport class GeoDbProModule {\n  static forRoot(config: GeoDbConfig): ModuleWithProviders {\n    return {\n      ngModule: GeoDbProModule,\n      providers: [\n        {provide: GeoDbConfig, useValue: config}\n      ]\n    };\n  }\n\n  constructor(config: GeoDbConfig) {\n  }\n}\n"]}