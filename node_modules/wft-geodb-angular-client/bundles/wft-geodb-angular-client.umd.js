(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common/http'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('wft-geodb-angular-client', ['exports', '@angular/common/http', '@angular/core'], factory) :
    (factory((global['wft-geodb-angular-client'] = {}),global.ng.common.http,global.ng.core));
}(this, (function (exports,http,core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GeoDbConfig = /** @class */ (function () {
        function GeoDbConfig() {
        }
        return GeoDbConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GeoDbService = /** @class */ (function () {
        function GeoDbService(httpClient, config) {
            this.httpClient = httpClient;
            this.config = config;
            this.adminDivisionsEndpoint = config.serviceUri + 'v1/geo/adminDivisions';
            this.countriesEndpoint = config.serviceUri + '/v1/geo/countries';
            this.currenciesEndpoint = config.serviceUri + '/v1/locale/currencies';
            this.languagesEndpoint = config.serviceUri + '/v1/locale/languages';
            this.localesEndpoint = config.serviceUri + '/v1/locale/locales';
            this.placesEndpoint = config.serviceUri + '/v1/geo/cities';
            this.timeZonesEndpoint = config.serviceUri + '/v1/locale/timezones';
        }
        /**
         * @private
         * @param {?} request
         * @return {?}
         */
        GeoDbService.buildPagingParams = /**
         * @private
         * @param {?} request
         * @return {?}
         */
            function (request) {
                return new http.HttpParams()
                    .set('offset', '' + request.offset)
                    .set('limit', '' + request.limit)
                    .set('hateoasMode', 'false');
            };
        /**
         * @private
         * @param {?} nearLocation
         * @return {?}
         */
        GeoDbService.toLocationString = /**
         * @private
         * @param {?} nearLocation
         * @return {?}
         */
            function (nearLocation) {
                /** @type {?} */
                var locationString = '';
                if (nearLocation.latitude > 0) {
                    locationString += '+';
                }
                locationString += nearLocation.latitude;
                if (nearLocation.longitude > 0) {
                    locationString += '+';
                }
                locationString += nearLocation.longitude;
                return locationString;
            };
        /**
         * @param {?} request
         * @return {?}
         */
        GeoDbService.prototype.findAdminDivisions = /**
         * @param {?} request
         * @return {?}
         */
            function (request) {
                /** @type {?} */
                var params = GeoDbService.buildPagingParams(request);
                if (request.countryIds) {
                    params = params.set('countryIds', request.countryIds.join(','));
                }
                if (request.excludedCountryIds) {
                    params = params.set('excludedCountryIds', request.excludedCountryIds.join(','));
                }
                if (request.namePrefix) {
                    params = params.set('namePrefix', request.namePrefix);
                }
                if (request.minPopulation) {
                    params = params.set('minPopulation', '' + request.minPopulation);
                }
                if (request.timeZoneIds) {
                    params = params.set('timeZoneIds', request.timeZoneIds.join(','));
                }
                if (request.asciiMode) {
                    params = params.set('asciiMode', '' + request.asciiMode);
                }
                if (request.languageCode) {
                    params = params.set('languageCode', request.languageCode);
                }
                if (request.sortDirectives) {
                    params = params.set('sort', request.sortDirectives.join(','));
                }
                if (request.includeDeleted) {
                    params = params.set('includeDeleted', request.includeDeleted);
                }
                return this.httpClient.get(this.adminDivisionsEndpoint, {
                    params: params
                });
            };
        /**
         * @param {?} request
         * @return {?}
         */
        GeoDbService.prototype.findPlace = /**
         * @param {?} request
         * @return {?}
         */
            function (request) {
                /** @type {?} */
                var endpoint = this.buildPlaceEndpoint(request.placeId);
                /** @type {?} */
                var params = new http.HttpParams();
                if (request.asciiMode) {
                    params = params.set('asciiMode', '' + request.asciiMode);
                }
                if (request.languageCode) {
                    params = params.set('languageCode', request.languageCode);
                }
                return this.httpClient.get(endpoint, {
                    params: params
                });
            };
        /**
         * @param {?} request
         * @return {?}
         */
        GeoDbService.prototype.findPlaces = /**
         * @param {?} request
         * @return {?}
         */
            function (request) {
                /** @type {?} */
                var params = GeoDbService.buildPagingParams(request);
                if (request.countryIds) {
                    params = params.set('countryIds', request.countryIds.join(','));
                }
                if (request.excludedCountryIds) {
                    params = params.set('excludedCountryIds', request.excludedCountryIds.join(','));
                }
                if (request.namePrefix) {
                    params = params.set('namePrefix', request.namePrefix);
                }
                if (request.minPopulation) {
                    params = params.set('minPopulation', '' + request.minPopulation);
                }
                if (request.timeZoneIds) {
                    params = params.set('timeZoneIds', request.timeZoneIds.join(','));
                }
                if (request.types) {
                    params = params.set('types', request.types.join(','));
                }
                if (request.asciiMode) {
                    params = params.set('asciiMode', '' + request.asciiMode);
                }
                if (request.languageCode) {
                    params = params.set('languageCode', request.languageCode);
                }
                if (request.sortDirectives) {
                    params = params.set('sort', request.sortDirectives.join(','));
                }
                if (request.includeDeleted) {
                    params = params.set('includeDeleted', request.includeDeleted);
                }
                return this.httpClient.get(this.placesEndpoint, {
                    params: params
                });
            };
        /**
         * @param {?} request
         * @return {?}
         */
        GeoDbService.prototype.findPlacesNearLocation = /**
         * @param {?} request
         * @return {?}
         */
            function (request) {
                /** @type {?} */
                var params = GeoDbService.buildPagingParams(request);
                params = params
                    .set('radius', '' + request.location.radius)
                    .set('distanceUnit', request.location.distanceUnit);
                if (request.minPopulation) {
                    params = params.set('minPopulation', '' + request.minPopulation);
                }
                if (request.namePrefix) {
                    params = params.set('namePrefix', request.namePrefix);
                }
                if (request.types) {
                    params = params.set('types', request.types.join(','));
                }
                if (request.asciiMode) {
                    params = params.set('asciiMode', '' + request.asciiMode);
                }
                if (request.languageCode) {
                    params = params.set('languageCode', request.languageCode);
                }
                if (request.sortDirectives) {
                    params = params.set('sort', request.sortDirectives.join(','));
                }
                if (request.includeDeleted) {
                    params = params.set('includeDeleted', request.includeDeleted);
                }
                // Workaround for HttpClient '+' encoding bug.
                /** @type {?} */
                var locationId = GeoDbService
                    .toLocationString(request.location)
                    .replace('+', '%2B');
                /** @type {?} */
                var endpoint = this.placesEndpoint + '?location=' + locationId;
                return this.httpClient.get(endpoint, {
                    params: params
                });
            };
        /**
         * @param {?} request
         * @return {?}
         */
        GeoDbService.prototype.findPlacesNearPlace = /**
         * @param {?} request
         * @return {?}
         */
            function (request) {
                /** @type {?} */
                var params = GeoDbService.buildPagingParams(request);
                params = params
                    .set('radius', '' + request.radius)
                    .set('distanceUnit', request.distanceUnit);
                if (request.minPopulation) {
                    params = params.set('minPopulation', '' + request.minPopulation);
                }
                if (request.types) {
                    params = params.set('types', request.types.join(','));
                }
                if (request.asciiMode) {
                    params = params.set('asciiMode', '' + request.asciiMode);
                }
                if (request.languageCode) {
                    params = params.set('languageCode', request.languageCode);
                }
                if (request.sortDirectives) {
                    params = params.set('sort', request.sortDirectives.join(','));
                }
                if (request.includeDeleted) {
                    params = params.set('includeDeleted', request.includeDeleted);
                }
                /** @type {?} */
                var endpoint = this.placesEndpoint + '/' + request.placeId + '/nearbyCities';
                return this.httpClient.get(endpoint, {
                    params: params
                });
            };
        /**
         * @param {?} request
         * @return {?}
         */
        GeoDbService.prototype.findCountries = /**
         * @param {?} request
         * @return {?}
         */
            function (request) {
                /** @type {?} */
                var params = GeoDbService.buildPagingParams(request);
                if (request.currencyCode) {
                    params = params.set('currencyCode', request.currencyCode);
                }
                if (request.namePrefix) {
                    params = params.set('namePrefix', request.namePrefix);
                }
                if (request.asciiMode) {
                    params = params.set('asciiMode', '' + request.asciiMode);
                }
                if (request.languageCode) {
                    params = params.set('languageCode', request.languageCode);
                }
                return this.httpClient.get(this.countriesEndpoint, {
                    params: params
                });
            };
        /**
         * @param {?} request
         * @return {?}
         */
        GeoDbService.prototype.findCountry = /**
         * @param {?} request
         * @return {?}
         */
            function (request) {
                /** @type {?} */
                var endpoint = this.countriesEndpoint + '/' + request.countryId;
                /** @type {?} */
                var params = new http.HttpParams();
                if (request.asciiMode) {
                    params = params.set('asciiMode', '' + request.asciiMode);
                }
                if (request.languageCode) {
                    params = params.set('languageCode', request.languageCode);
                }
                return this.httpClient.get(endpoint, {
                    params: params
                });
            };
        /**
         * @param {?} request
         * @return {?}
         */
        GeoDbService.prototype.findCurrencies = /**
         * @param {?} request
         * @return {?}
         */
            function (request) {
                /** @type {?} */
                var params = GeoDbService.buildPagingParams(request);
                if (request.countryId) {
                    params = params.set('countryId', request.countryId);
                }
                return this.httpClient.get(this.currenciesEndpoint, {
                    params: params
                });
            };
        /**
         * @param {?} request
         * @return {?}
         */
        GeoDbService.prototype.findLanguages = /**
         * @param {?} request
         * @return {?}
         */
            function (request) {
                /** @type {?} */
                var params = GeoDbService.buildPagingParams(request);
                return this.httpClient.get(this.languagesEndpoint, {
                    params: params
                });
            };
        /**
         * @param {?} request
         * @return {?}
         */
        GeoDbService.prototype.findLocales = /**
         * @param {?} request
         * @return {?}
         */
            function (request) {
                /** @type {?} */
                var params = GeoDbService.buildPagingParams(request);
                return this.httpClient.get(this.localesEndpoint, {
                    params: params
                });
            };
        /**
         * @param {?} request
         * @return {?}
         */
        GeoDbService.prototype.findRegion = /**
         * @param {?} request
         * @return {?}
         */
            function (request) {
                /** @type {?} */
                var endpoint = this.buildRegionsEndpoint(request.countryId) + '/' + request.regionCode;
                /** @type {?} */
                var params = new http.HttpParams();
                if (request.asciiMode) {
                    params = params.set('asciiMode', '' + request.asciiMode);
                }
                if (request.languageCode) {
                    params = params.set('languageCode', request.languageCode);
                }
                return this.httpClient.get(endpoint, {
                    params: params
                });
            };
        /**
         * @param {?} request
         * @return {?}
         */
        GeoDbService.prototype.findRegionPlaces = /**
         * @param {?} request
         * @return {?}
         */
            function (request) {
                /** @type {?} */
                var endpoint = this.buildRegionEndpoint(request.countryId, request.regionCode) + '/cities';
                /** @type {?} */
                var params = GeoDbService.buildPagingParams(request);
                if (request.minPopulation) {
                    params = params.set('minPopulation', '' + request.minPopulation);
                }
                if (request.types) {
                    params = params.set('types', request.types.join(','));
                }
                if (request.asciiMode) {
                    params = params.set('asciiMode', '' + request.asciiMode);
                }
                if (request.languageCode) {
                    params = params.set('languageCode', request.languageCode);
                }
                if (request.sortDirectives) {
                    params = params.set('sort', request.sortDirectives.join(','));
                }
                return this.httpClient.get(endpoint, {
                    params: params
                });
            };
        /**
         * @param {?} request
         * @return {?}
         */
        GeoDbService.prototype.findRegions = /**
         * @param {?} request
         * @return {?}
         */
            function (request) {
                /** @type {?} */
                var endpoint = this.buildRegionsEndpoint(request.countryId);
                /** @type {?} */
                var params = GeoDbService.buildPagingParams(request);
                if (request.namePrefix) {
                    params = params.set('namePrefix', request.namePrefix);
                }
                if (request.asciiMode) {
                    params = params.set('asciiMode', '' + request.asciiMode);
                }
                if (request.languageCode) {
                    params = params.set('languageCode', request.languageCode);
                }
                return this.httpClient.get(endpoint, {
                    params: params
                });
            };
        /**
         * @param {?} request
         * @return {?}
         */
        GeoDbService.prototype.findTimeZones = /**
         * @param {?} request
         * @return {?}
         */
            function (request) {
                /** @type {?} */
                var params = GeoDbService.buildPagingParams(request);
                return this.httpClient.get(this.timeZonesEndpoint, {
                    params: params
                });
            };
        Object.defineProperty(GeoDbService.prototype, "apiKey", {
            get: /**
             * @return {?}
             */ function () {
                return this.config.apiKey;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} apiKey
         * @return {?}
         */
        GeoDbService.prototype.setApiKey = /**
         * @param {?} apiKey
         * @return {?}
         */
            function (apiKey) {
                this.config.apiKey = apiKey;
            };
        /**
         * @param {?} id
         * @return {?}
         */
        GeoDbService.prototype.getPlaceDateTime = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                /** @type {?} */
                var endpoint = this.buildPlaceEndpoint(id) + '/dateTime';
                return this.httpClient.get(endpoint);
            };
        /**
         * @param {?} request
         * @return {?}
         */
        GeoDbService.prototype.getPlaceDistance = /**
         * @param {?} request
         * @return {?}
         */
            function (request) {
                /** @type {?} */
                var endpoint = this.buildPlaceEndpoint(request.toPlaceId) + '/distance';
                /** @type {?} */
                var params = new http.HttpParams()
                    .set('fromPlaceId', '' + request.fromPlaceId)
                    .set('distanceUnit', '' + request.distanceUnit);
                return this.httpClient.get(endpoint, {
                    params: params
                });
            };
        /**
         * @param {?} placeId
         * @return {?}
         */
        GeoDbService.prototype.getPlaceTime = /**
         * @param {?} placeId
         * @return {?}
         */
            function (placeId) {
                /** @type {?} */
                var endpoint = this.buildPlaceEndpoint(placeId) + '/time';
                return this.httpClient.get(endpoint);
            };
        /**
         * @param {?} zoneId
         * @return {?}
         */
        GeoDbService.prototype.getTimeZoneDateTime = /**
         * @param {?} zoneId
         * @return {?}
         */
            function (zoneId) {
                /** @type {?} */
                var endpoint = this.buildTimeZoneEndpoint(zoneId) + '/dateTime';
                return this.httpClient.get(endpoint);
            };
        /**
         * @param {?} zoneId
         * @return {?}
         */
        GeoDbService.prototype.getTimeZoneTime = /**
         * @param {?} zoneId
         * @return {?}
         */
            function (zoneId) {
                /** @type {?} */
                var endpoint = this.buildTimeZoneEndpoint(zoneId) + '/time';
                return this.httpClient.get(endpoint);
            };
        /**
         * @private
         * @param {?} olaceId
         * @return {?}
         */
        GeoDbService.prototype.buildPlaceEndpoint = /**
         * @private
         * @param {?} olaceId
         * @return {?}
         */
            function (olaceId) {
                return this.placesEndpoint + '/' + olaceId;
            };
        /**
         * @private
         * @param {?} countryId
         * @param {?} regionCode
         * @return {?}
         */
        GeoDbService.prototype.buildRegionEndpoint = /**
         * @private
         * @param {?} countryId
         * @param {?} regionCode
         * @return {?}
         */
            function (countryId, regionCode) {
                return this.buildRegionsEndpoint(countryId) + '/' + regionCode;
            };
        /**
         * @private
         * @param {?} countryId
         * @return {?}
         */
        GeoDbService.prototype.buildRegionsEndpoint = /**
         * @private
         * @param {?} countryId
         * @return {?}
         */
            function (countryId) {
                return this.countriesEndpoint + '/' + countryId + '/regions';
            };
        /**
         * @private
         * @param {?} zoneId
         * @return {?}
         */
        GeoDbService.prototype.buildTimeZoneEndpoint = /**
         * @private
         * @param {?} zoneId
         * @return {?}
         */
            function (zoneId) {
                return this.timeZonesEndpoint + '/' + zoneId;
            };
        GeoDbService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        GeoDbService.ctorParameters = function () {
            return [
                { type: http.HttpClient },
                { type: GeoDbConfig }
            ];
        };
        return GeoDbService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GeoDbFreeModule = /** @class */ (function () {
        function GeoDbFreeModule(config) {
        }
        /**
         * @param {?} config
         * @return {?}
         */
        GeoDbFreeModule.forRoot = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                return {
                    ngModule: GeoDbFreeModule,
                    providers: [
                        { provide: GeoDbConfig, useValue: config }
                    ]
                };
            };
        GeoDbFreeModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [
                            GeoDbService
                        ],
                        imports: [
                            http.HttpClientModule
                        ]
                    },] }
        ];
        /** @nocollapse */
        GeoDbFreeModule.ctorParameters = function () {
            return [
                { type: GeoDbConfig }
            ];
        };
        return GeoDbFreeModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AuthInterceptor = /** @class */ (function () {
        function AuthInterceptor(config) {
            this.config = config;
        }
        /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        AuthInterceptor.prototype.intercept = /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
            function (request, next) {
                if (request.url.startsWith(this.config.serviceUri)) {
                    /** @type {?} */
                    var headers = request
                        .headers
                        .set('X-Mashape-Key', this.config.apiKey);
                    return next.handle(request.clone({ headers: headers }));
                }
                return next.handle(request);
            };
        AuthInterceptor.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AuthInterceptor.ctorParameters = function () {
            return [
                { type: GeoDbConfig }
            ];
        };
        return AuthInterceptor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GeoDbProModule = /** @class */ (function () {
        function GeoDbProModule(config) {
        }
        /**
         * @param {?} config
         * @return {?}
         */
        GeoDbProModule.forRoot = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                return {
                    ngModule: GeoDbProModule,
                    providers: [
                        { provide: GeoDbConfig, useValue: config }
                    ]
                };
            };
        GeoDbProModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [
                            GeoDbService,
                            {
                                provide: http.HTTP_INTERCEPTORS,
                                useClass: AuthInterceptor,
                                multi: true
                            }
                        ],
                        imports: [
                            http.HttpClientModule
                        ]
                    },] }
        ];
        /** @nocollapse */
        GeoDbProModule.ctorParameters = function () {
            return [
                { type: GeoDbConfig }
            ];
        };
        return GeoDbProModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.GeoDbFreeModule = GeoDbFreeModule;
    exports.GeoDbProModule = GeoDbProModule;
    exports.GeoDbService = GeoDbService;
    exports.ɵb = AuthInterceptor;
    exports.ɵa = GeoDbConfig;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=wft-geodb-angular-client.umd.js.map