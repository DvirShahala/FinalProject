/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { NgModule } from '@angular/core';
import { AuthInterceptor } from './auth.interceptor';
import { GeoDbService } from './geodb.service';
import { GeoDbConfig } from './model/geodb-config.model';
var GeoDbProModule = /** @class */ (function () {
    function GeoDbProModule(config) {
    }
    /**
     * @param {?} config
     * @return {?}
     */
    GeoDbProModule.forRoot = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: GeoDbProModule,
            providers: [
                { provide: GeoDbConfig, useValue: config }
            ]
        };
    };
    GeoDbProModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        GeoDbService,
                        {
                            provide: HTTP_INTERCEPTORS,
                            useClass: AuthInterceptor,
                            multi: true
                        }
                    ],
                    imports: [
                        HttpClientModule
                    ]
                },] }
    ];
    /** @nocollapse */
    GeoDbProModule.ctorParameters = function () { return [
        { type: GeoDbConfig }
    ]; };
    return GeoDbProModule;
}());
export { GeoDbProModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvZGItcHJvLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3dmdC1nZW9kYi1hbmd1bGFyLWNsaWVudC8iLCJzb3VyY2VzIjpbImxpYi9nZW9kYi1wcm8ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsZ0JBQWdCLEVBQUUsaUJBQWlCLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RSxPQUFPLEVBQXNCLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUU1RCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFDbkQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQUV2RDtJQXVCRSx3QkFBWSxNQUFtQjtJQUMvQixDQUFDOzs7OztJQVZNLHNCQUFPOzs7O0lBQWQsVUFBZSxNQUFtQjtRQUNoQyxPQUFPO1lBQ0wsUUFBUSxFQUFFLGNBQWM7WUFDeEIsU0FBUyxFQUFFO2dCQUNULEVBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFDO2FBQ3pDO1NBQ0YsQ0FBQztJQUNKLENBQUM7O2dCQXJCRixRQUFRLFNBQUM7b0JBQ1IsU0FBUyxFQUFFO3dCQUNULFlBQVk7d0JBQ1o7NEJBQ0UsT0FBTyxFQUFFLGlCQUFpQjs0QkFDMUIsUUFBUSxFQUFFLGVBQWU7NEJBQ3pCLEtBQUssRUFBRSxJQUFJO3lCQUNaO3FCQUNGO29CQUNELE9BQU8sRUFBRTt3QkFDUCxnQkFBZ0I7cUJBQ2pCO2lCQUNGOzs7O2dCQWRPLFdBQVc7O0lBMkJuQixxQkFBQztDQUFBLEFBekJELElBeUJDO1NBWlksY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SHR0cENsaWVudE1vZHVsZSwgSFRUUF9JTlRFUkNFUFRPUlN9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7TW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge0F1dGhJbnRlcmNlcHRvcn0gZnJvbSAnLi9hdXRoLmludGVyY2VwdG9yJztcbmltcG9ydCB7R2VvRGJTZXJ2aWNlfSBmcm9tICcuL2dlb2RiLnNlcnZpY2UnO1xuaW1wb3J0IHtHZW9EYkNvbmZpZ30gZnJvbSAnLi9tb2RlbC9nZW9kYi1jb25maWcubW9kZWwnO1xuXG5ATmdNb2R1bGUoe1xuICBwcm92aWRlcnM6IFtcbiAgICBHZW9EYlNlcnZpY2UsXG4gICAge1xuICAgICAgcHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsXG4gICAgICB1c2VDbGFzczogQXV0aEludGVyY2VwdG9yLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF0sXG4gIGltcG9ydHM6IFtcbiAgICBIdHRwQ2xpZW50TW9kdWxlXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgR2VvRGJQcm9Nb2R1bGUge1xuICBzdGF0aWMgZm9yUm9vdChjb25maWc6IEdlb0RiQ29uZmlnKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBHZW9EYlByb01vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7cHJvdmlkZTogR2VvRGJDb25maWcsIHVzZVZhbHVlOiBjb25maWd9XG4gICAgICBdXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogR2VvRGJDb25maWcpIHtcbiAgfVxufVxuIl19