import { Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { PlaceDetails } from './model/place-details.model';
import { PlaceSummary } from './model/place-summary.model';
import { CountrySummary } from './model/country-summary.model';
import { GeoResponse } from './model/geo-response.model';
import { RegionSummary } from './model/region-summary.model';
import { GeoDbConfig } from './model/geodb-config.model';
import { CountryDetails } from './model/country-details.model';
import { RegionDetails } from './model/region-details.model';
import { Currency } from './model/currency.model';
import { Locale } from './model/locale.model';
import { FindAdminDivisionsRequest } from './request/find-admin-divisions-request.model';
import { FindPlacesRequest } from './request/find-places-request.model';
import { FindCollectionRequest } from './request/find-collection-request.model';
import { FindCountriesRequest } from './request/find-countries-request.model';
import { FindCurrenciesRequest } from './request/find-currencies-request.model';
import { FindRegionsRequest } from './request/find-regions-request.model';
import { FindRegionCitiesRequest } from './request/find-region-cities-request.model';
import { FindPlacesNearPlaceRequest } from './request/find-places-near-place-request.model';
import { TimeZone } from './model/time-zone.model';
import { GetPlaceDistanceRequest } from './request/get-place-distance-request.model';
import { FindPlacesNearLocationRequest } from './request/find-places-near-location-request.model';
import { GetPlaceDetailsRequest } from './request/get-place-details-request.model';
import { GetCountryDetailsRequest } from './request/get-country-details-request.model';
import { GetRegionDetailsRequest } from './request/get-region-details-request.model';
import { Language } from './model/language.model';
export declare class GeoDbService {
    private httpClient;
    private config;
    private adminDivisionsEndpoint;
    private countriesEndpoint;
    private currenciesEndpoint;
    private languagesEndpoint;
    private localesEndpoint;
    private placesEndpoint;
    private timeZonesEndpoint;
    constructor(httpClient: HttpClient, config: GeoDbConfig);
    private static buildPagingParams;
    private static toLocationString;
    findAdminDivisions(request: FindAdminDivisionsRequest): Observable<GeoResponse<PlaceSummary[]>>;
    findPlace(request: GetPlaceDetailsRequest): Observable<GeoResponse<PlaceDetails>>;
    findPlaces(request: FindPlacesRequest): Observable<GeoResponse<PlaceSummary[]>>;
    findPlacesNearLocation(request: FindPlacesNearLocationRequest): Observable<GeoResponse<PlaceSummary[]>>;
    findPlacesNearPlace(request: FindPlacesNearPlaceRequest): Observable<GeoResponse<PlaceSummary[]>>;
    findCountries(request: FindCountriesRequest): Observable<GeoResponse<CountrySummary[]>>;
    findCountry(request: GetCountryDetailsRequest): Observable<GeoResponse<CountryDetails>>;
    findCurrencies(request: FindCurrenciesRequest): Observable<GeoResponse<Currency[]>>;
    findLanguages(request: FindCollectionRequest): Observable<GeoResponse<Language[]>>;
    findLocales(request: FindCollectionRequest): Observable<GeoResponse<Locale[]>>;
    findRegion(request: GetRegionDetailsRequest): Observable<GeoResponse<RegionDetails>>;
    findRegionPlaces(request: FindRegionCitiesRequest): Observable<GeoResponse<PlaceSummary[]>>;
    findRegions(request: FindRegionsRequest): Observable<GeoResponse<RegionSummary[]>>;
    findTimeZones(request: FindCollectionRequest): Observable<GeoResponse<TimeZone[]>>;
    readonly apiKey: string;
    setApiKey(apiKey: string): void;
    getPlaceDateTime(id: string): Observable<GeoResponse<string>>;
    getPlaceDistance(request: GetPlaceDistanceRequest): Observable<GeoResponse<number>>;
    getPlaceTime(placeId: string): Observable<GeoResponse<string>>;
    getTimeZoneDateTime(zoneId: string): Observable<GeoResponse<string>>;
    getTimeZoneTime(zoneId: string): Observable<GeoResponse<string>>;
    private buildPlaceEndpoint;
    private buildRegionEndpoint;
    private buildRegionsEndpoint;
    private buildTimeZoneEndpoint;
}
